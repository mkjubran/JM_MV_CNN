#!/bin/bash
#clear

# Set initial default parameters
enc_cfg=encoder_option1.cfg		#JM encoder configuration file
QPISlice=30 			#value [0 - 51]
QPPSlice=30 			#value [0 - 51]
SearchRange=16			#value [16,32,64]
mbmapXxX=8			#value [8,16]
SetType="train"			#value [0:Train Set,1: Test Set]
TTSet=01			#UCF-101 Split Set [01 02 03]
IndexFirstVideo=0		#Index of first video to be encoded [1,2, .... ]
NumVideos=7000			#Number of Video files to be encoded
StrComment="_A16"			#Comment to be added at the end of the directory that will be made (if doesn't exist) to contain the output MVs
Overwrite=1			#Overwrite any exisitng MV files in the directory
PathWay="../JMMV/JM_HMDB_QP30_MVSR16_MVRes8_A16"

## Parsing Command Line Parameters
## cmd exmaple: ./Generate-Split-1 -ecfg=encoder.cfg -qp=25 -sr=16 -res=4 -settype=test sset=01 -ifvid=1 -nvid=5 -strcom=Opt1a
for i in "$@"
do
case $i in
    -ecfg=*|--ecfg=*)
    enc_cfg="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QPISlice="${i#*=}"
    QPPSlice="${i#*=}"
    shift
    ;;
    -sr=*|--sr=*)
    SearchRange="${i#*=}"
    shift
    ;;
    -res=*|--res=*)
    mbmapXxX="${i#*=}"
    shift
    ;;
    -settype=*|--settype=*)
    SetType="${i#*=}"
    shift
    ;;
   -sset=*|--sset=*)
    TTSet="${i#*=}"
    shift
    ;;
    -ifvid=*|--ifvid=*)
    IndexFirstVideo="${i#*=}"
    shift
    ;;
    -nvid=*|--nvid=*)
    NumVideos="${i#*=}"
    shift
    ;;
   -ow=*|--ow=*)
    Overwrite="${i#*=}"
    shift
    ;;
   -strcom=*|--strcom=*)
    StrComment="_${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters

# Hardcoded Parameters
NumFrame=30000
IndexLastVideo=$((IndexFirstVideo + NumVideos - 1))
cntLoop=1; #To prevent loop
#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $SetType = "train" ] || [ $SetType = "Train" ];
then
SetType="train"
InputFileList="../../HMDBTrainTestlist/trainlist"$TTSet".txt"
else if [ $SetType = "test" ] || [ $SetType = "Test" ];
then
SetType="test"
InputFileList="../../HMDBTrainTestlist/testlist"$TTSet".txt"
else
echo "$SetType is not recognized as set type. It must be train or test"
exit 1
fi
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

if [ $IndexLastVideo -gt ${#Lines[@]} ]
then
IndexLastVideo=${#Lines[@]}
fi
TotalVideos=$((IndexLastVideo-IndexFirstVideo+1))

#%%%%%%%%%% Hidder General Info
echo %########################################################################################
echo "JM config file=${enc_cfg}, QP=$QPISlice, Search Range=$SearchRange, MV Resolution=$mbmapXxX, HMDB Split Set = $TTSet"
echo "Set type (train/test)=$SetType, Index of First Video = $IndexFirstVideo, Number of Videos = $TotalVideos"  
echo %########################################################################################

cnt1=$IndexFirstVideo;
cnt2=1; #increment 
while [ $cnt1 -le $IndexLastVideo ]
do
Line=${Lines[$cnt1]}
FileName="${Line##*/}"
FileNameP1="${FileName% *}"
FileNameP2="avi"
AbsFileName=$FileNameP1.$FileNameP2

#%%%%%%%%%% Show Processing Progress to keep track
PerCompleted1=$((100*(cnt1-IndexFirstVideo+1)/(IndexLastVideo-IndexFirstVideo+1)))
PerCompleted2=$((100*(cnt1-IndexFirstVideo+1)%(IndexLastVideo-IndexFirstVideo+1)))
echo "($StrComment, $SetType) processing video file number $cnt1  [$IndexFirstVideo - $IndexLastVideo] ($AbsFileName) ... $PerCompleted1.$PerCompleted2% completed .. $(date +"%d-%m-%y %T")"


#%% check if path exists

if ! [ -d $PathWay ]
then
echo "$PathWay doens't exit"
break
fi

if [[ (! -s $PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin) || (! -s $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_NoTexture_Alll"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) ]]
then
TrainIsZero=true
else
TrainIsZero=false
fi

if [[ (! -s $PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin) || (! -s $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) ]]
then
TestIsZero=true
else
TestIsZero=false
fi

if [[ ((($Overwrite -eq 1) || (($SetType = "train") && (! -e "$PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin")) || (($SetType = "train") && ( $TrainIsZero = true))) || (($Overwrite -eq 1) || (($SetType = "test") && (! -e "$PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin")) || (($SetType = "test") && ( $TestIsZero = true )))) ]] ; 
then


#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"


if [ $SetType = "train" ]
then
 if ! [ -d $PathWay/JMMV_HMDB_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMMV_HMDB_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi
 
 if ! [ -d $PathWay/JMStats_HMDB_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMStats_HMDB_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

 if ! [ -d $PathWay/JMStats_HMDB_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMStats_HMDB_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

cp -f $PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin $PathWay/JMMV_HMDB_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
cp -f $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat $PathWay/JMStats_HMDB_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat $PathWay/JMStats_HMDB_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat $PathWay/JMStats_HMDB_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat $PathWay/JMStats_HMDB_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat

else

 if ! [ -d $PathWay/JMMV_HMDB_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMMV_HMDB_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment 
 fi
 
 if ! [ -d $PathWay/JMStats_HMDB_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMStats_HMDB_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment 
 fi

 if ! [ -d $PathWay/JMStats_HMDB_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/JMStats_HMDB_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

cp -f $PathWay/JMMV_HMDB_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin $PathWay/JMMV_HMDB_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
cp -f $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat $PathWay/JMStats_HMDB_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_NoTexture_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat $PathWay/JMStats_HMDB_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat $PathWay/JMStats_HMDB_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
cp -f $PathWay/JMStats_HMDB_OrigJM_All"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat $PathWay/JMStats_HMDB_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat
fi

fi # end check if the files already exists

cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList or NumVideos


#(($SetType = "train") && (! -e "../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin"))
