#!/bin/bash
#clear

# Set initial default parameters
enc_cfg=encoder.cfg		#JM encoder configuration file
QPISlice=25 			#value [0 - 51]
QPPSlice=25 			#value [0 - 51]
SearchRange=16			#value [16,32,64]
mbmapXxX=8			#value [8,16]
SetType="test"			#value [0:Train Set,1: Test Set]
TTSet=01			#UCF-101 Split Set [01 02 03]
IndexFirstVideo=1		#Index of first video to be encoded [1,2, .... ]
NumVideos=1			#Number of Video files to be encoded
StrComment=""			#Comment to be added at the end of the directory that will be made (if doesn't exist) to contain the output MVs

## Parsing Command Line Parameters
## cmd exmaple: ./Generate-Split-1 -ecfg=encoder.cfg -qp=25 -sr=16 -res=4 -settype=test sset=01 -ifvid=1 -nvid=5 -strcom=Opt1a
for i in "$@"
do
case $i in
    -ecfg=*|--ecfg=*)
    enc_cfg="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QPISlice="${i#*=}"
    QPPSlice="${i#*=}"
    shift
    ;;
    -sr=*|--sr=*)
    SearchRange="${i#*=}"
    shift
    ;;
    -res=*|--res=*)
    mbmapXxX="${i#*=}"
    shift
    ;;
    -settype=*|--settype=*)
    SetType="${i#*=}"
    shift
    ;;
   -sset=*|--sset=*)
    TTSet="${i#*=}"
    shift
    ;;
    -ifvid=*|--ifvid=*)
    IndexFirstVideo="${i#*=}"
    shift
    ;;
    -nvid=*|--nvid=*)
    NumVideos="${i#*=}"
    shift
    ;;
   -strcom=*|--strcom=*)
    StrComment="_${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters

# Hardcoded Parameters
NumFrame=1000
IndexLastVideo=$((IndexFirstVideo + NumVideos - 1))
#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $SetType = "train" ] || [ $SetType = "Train" ];
then
SetType="train"
InputFileList="../../ucfTrainTestlist/trainlist"$TTSet".txt"
else if [ $SetType = "test" ] || [ $SetType = "Test" ];
then
SetType="test"
InputFileList="../../ucfTrainTestlist/testlist"$TTSet".txt"
else
echo "$SetType is not recognized as set type. It must be train or test"
exit 1
fi
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

if [ $IndexLastVideo -gt ${#Lines[@]} ]
then
IndexLastVideo=${#Lines[@]}
fi
TotalVideos=$((IndexLastVideo-IndexFirstVideo+1))

#%%%%%%%%%% Hidder General Info
echo %########################################################################################
echo "JM config file=${enc_cfg}, QP=$QPISlice, Search Range=$SearchRange, MV Resolution=$mbmapXxX, UCF-101 Split Set = $TTSet"
echo "Set type (train/test)=$SetType, Index of First Video = $IndexFirstVideo, Number of Videos = $TotalVideos"  
echo %########################################################################################

cnt1=$IndexFirstVideo;
cnt2=1; #increment 
while [ $cnt1 -le $IndexLastVideo ]
do
Line=${Lines[$cnt1]}

var0=$(echo $Line | awk -F".avi" '{print $1,$2}')   
set -- $var0 "$@"
AbsFileName=$1".avi"

var1=$(echo $AbsFileName | awk -F"/" '{print $1,$2}')   
set -- $var1 "$@"
Directory=$1
FileName=$2

var2=$(echo $FileName | awk -F"." '{print $1,$2}')   
set -- $var2 "$@"
FileNameP1=$1
FileNameP2=$2

#%%%%%%%%%% Show Processing Progress to keep track
PerCompleted1=$((100*(cnt1-IndexFirstVideo+1)/(IndexLastVideo-IndexFirstVideo+1)))
PerCompleted2=$((100*(cnt1-IndexFirstVideo+1)%(IndexLastVideo-IndexFirstVideo+1)))
echo "Processing video file number $cnt1  [$IndexFirstVideo - $IndexLastVideo] ($AbsFileName) ... $PerCompleted1.$PerCompleted2% completed"

#%%%%%%%%%% Transcoding FileName from .avi to .yuv and store the output yuv file in ./vid/"
cd JM_MVX_NoTexture/bin
if [ ! -e "../../../../UCF-101/$AbsFileName" ] ; then
echo "../../../../UCF-101/$AbsFileName" "doesn't exit"
break
fi

rm ./vid/JMInputVideo.yuv
ffmpeg -loglevel panic -i '../../../../UCF-101/'$AbsFileName -vcodec rawvideo -pix_fmt yuv420p './vid/JMInputVideo.yuv' > /dev/null

if [ ! -e "./vid/JMInputVideo.yuv" ] ; then
echo "Problem with ffmpeg while converting $AbsFileName to yuv, ./vid/JMInputVideo.yuv is not generated"
break
fi

#%%%%%%%%%% Encoding FileName from .yuv to .264 using JM encoder"
if [ ! -e "$enc_cfg" ] ; then
echo "$enc_cfg" "doesn't exit"
break
fi

rm ./vid/JMEncodedVideo.264
./lencod.exe -f $enc_cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=$NumFrame -p OutputFile="./vid/JMEncodedVideo.264" > /dev/null

if [ ! -e "./vid/JMEncodedVideo.264" ] ; then
echo "Problem with encoding [$AbsFileName] yuv to 264, ./vid/JMEncodedVideo.264 is not generated"
break
fi

#%%%%%%%%%% Decoding FileName from .264 to .yuv using JM decoder"
rm mv.bin > /dev/null 2>&1
rm ./vid/JMDecodedVideo.yuv
./ldecod.exe -f decoder.cfg -p InputFile="./vid/JMEncodedVideo.264" -p OutputFile="./vid/JMDecodedVideo.yuv" > /dev/null

if [ ! -e "./vid/JMDecodedVideo.yuv" ] ; then
echo "Problem with decoding [$AbsFileName].264 to yuv, ./vid/JMDecodedVideo.yuv is not generated"
break
fi

#%%%%%%%%%% Mapping MV to Macroblocks (make grid) and make them in a format suitable as input to classifier (Training/Testing)"
rm ../../mbmap/mv_dec.bin
mv -f mv.bin ../../mbmap/mv_dec.bin
cd ../../mbmap
if [ $mbmapXxX -eq 8 ] || [ $mbmapXxX -eq 4 ];
then
./mbmap -h 240 -w 320 -$3 -o JMMV_mbmap.bin mv_dec.bin > /dev/null
else
 ./mbmap -h 240 -w 320 -o JMMV_mbmap.bin mv_dec.bin > /dev/null
fi

if [ ! -e "./JMMV_mbmap.bin" ] ; then
echo "Mapping MV to Macroblocks (Grid of MVs) for [$AbsFileName], ./JMMV_mbmap.bin is not generated"
break
fi

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

if ! [ -d ../../JMMV ]
then
mkdir ../../JMMV
fi


if [ $SetType = "train" ]
then
 if ! [ -d ../../JMMV/JMMV_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMMV_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi
mv -f JMMV_mbmap.bin ../../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
else
 if ! [ -d ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi
mv -f JMMV_mbmap.bin ../../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
fi


cd ..
cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList or NumVideos

