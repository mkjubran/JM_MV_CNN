#!/bin/bash
clear

TTSet="01";

#%%%%%%%%%% Store input Parameters
QPISlice=$1 		#value [0 - 51]
QPPSlice=$1 		#value [0 - 51]
SearchRange=$2		#value [16,32,64]
mbmapXxX=$3		#value [8,16]
TraingSet=$4		#value [0:Train Set,1: Test Set]

echo %#######################################################################
echo MV QP=$1 , Search Range=$2, MV Resolution=$3, TrainingList=$4
echo %#######################################################################

#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $TraingSet -eq 1 ]
then
InputFileList="../ucfTrainTestlist/trainlist"$TTSet".txt"
else
InputFileList="../ucfTrainTestlist/testlist"$TTSet".txt"
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

cnt1=0;
cnt2=1;
while [ $cnt1 -le ${#Lines[@]} ] 
do
Line=${Lines[$cnt1]}

if [ $TraingSet -eq 1 ]
then
var0=$(echo $Line | awk -F" " '{print $1,$2}')   
set -- $var0 "$@"
AbsFileName=$1
else
AbsFileName=$Line
fi

var1=$(echo $AbsFileName | awk -F"/" '{print $1,$2}')   
set -- $var1 "$@"
Directory=$1
FileName=$2

var2=$(echo $FileName | awk -F"." '{print $1,$2}')   
set -- $var2 "$@"
FileNameP1=$1
FileNameP2=$2


echo $AbsFileName
echo $Directory
echo $FileName
echo $FileNameP1
echo $FileNameP2

#%%%%%%%%%% Transcoding FileName from .avi to .yuv and store the output yuv file in ./vid/"
pwd
cd JM_MVX_NoTexture/bin
if [ ! -e "../../../UCF-101/$AbsFileName" ] ; then
echo "../../../UCF-101/$AbsFileName" "doesn't exit"
break
fi

rm ./vid/JMInputVideo.yuv
ffmpeg -i '../../../UCF-101/'$AbsFileName -vcodec rawvideo -pix_fmt yuv420p './vid/JMInputVideo.yuv'

if [ ! -e "./vid/JMInputVideo.yuv" ] ; then
echo "Problem with ffmpeg while converting $AbsFileName to yuv, ./vid/JMInputVideo.yuv is not generated"
break
fi

#%%%%%%%%%% Encoding FileName from .yuv to .264 using JM encoder"
rm ./vid/JMEncodedVideo.264
./lencod.exe -f encoder.cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=1000 -p OutputFile="./vid/JMEncodedVideo.264"

if [ ! -e "./vid/JMEncodedVideo.264" ] ; then
echo "Problem with encoding [$AbsFileName] yuv to 264, ./vid/JMEncodedVideo.264 is not generated"
break
fi

#%%%%%%%%%% Decoding FileName from .264 to .yuv using JM decoder"
rm mv.bin
rm ./vid/JMDecodedVideo.yuv
./ldecod.exe -f decoder.cfg -p InputFile="./vid/JMEncodedVideo.264" -p OutputFile="./vid/JMDecodedVideo.yuv"

if [ ! -e "./vid/JMDecodedVideo.yuv" ] ; then
echo "Problem with decoding [$AbsFileName].264 to yuv, ./vid/JMDecodedVideo.yuv is not generated"
break
fi

#%%%%%%%%%% Mapping MV to Macroblocks (make grid) and make them in a format suitable as input to classifier (Training/Testing)"
rm ../../mbmap/mv_dec.bin
mv mv.bin ../../mbmap/mv_dec.bin
cd ../../mbmap
if [ $mbmapXxX -eq 8 ]
then
./mbmap -h 240 -w 320 -$3 -o JMMV_mbmap.bin mv_dec.bin
echo "./mbmap -h 240 -w 320 "-$3" -o JMMV_mbmap.bin mv_dec.bin"
else
 ./mbmap -h 240 -w 320 -o JMMV_mbmap.bin mv_dec.bin
echo "./mbmap -h 240 -w 320 -o JMMV_mbmap.bin mv_dec.bin"
fi

if [ ! -e "./JMMV_mbmap.bin" ] ; then
echo "Mapping MV to Macroblocks (Grid of MVs) for [$AbsFileName], ./JMMV_mbmap.bin is not generated"
break
fi

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately" 
if [ $TraingSet -eq 1 ]
then
 if ! [ -d ../../JMMV/JMMV_Training$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX ]
 then
 mkdir ../../JMMV/JMMV_Training$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX
 fi
mv JMMV_mbmap.bin ../../JMMV/JMMV_Training$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX/JMMV_$FileNameP1.bin
else
 if ! [ -d ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX ]
 then
 mkdir ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX
 fi
mv JMMV_mbmap.bin ../../JMMV/JMMV$TTSet"_"Test_QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX/JMMV_$FileNameP1.bin
fi


cd ..

cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList

